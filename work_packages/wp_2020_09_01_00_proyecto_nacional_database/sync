#!/bin/bash

# -----------------------------------------------------------------
#
# Push the full repo to a remote.
#  
# -----------------------------------------------------------------

# Remote folder, including the user and the host.
REMOTE_FOLDER=$MLKC_LFS_ROOT
# Excludes, for example ("a*" "e*" "r*") 
EXCLUDES=(".DS_Store" ".git")
# SSH port
SSH_PORT=22
# Amazon AWS PEM key (it´s a path to a file, or blank if none)
AWS_PEM=





# ---

# Help function
help(){
cat <<EOF
rsyncs the repo, completely or partially, to a remote location.
Usually used in combination with mlkcontexts.

The following heavy-data folders can be skipped:

  - project main data folder
  - project main docker_persistent_volumes
  - inside each work_packages/wp_whatever:
    - data
    - docker_persistent_volumes
  - a set of arbitrary folders
  - a set of arbitrary files

Data and docker_persistent_volumes can be skipped selectively.

Command:

  ./push -r -d -a -p -h

Usage:
  -r        Perform the operation (DRYRUN false).
  -d        DELETE true... use with caution!!!
  -a        rsync also data folders.
  -p        rsync also Docker volumes folders.
  -h        This help.
EOF

return 0
}

# Source folder, can be the folder itself.
SOURCE_FOLDER=.

# Get the project-family/project path
WP3=${PWD##*/}
cd ..
WP2=${PWD##*/}
cd ..
WP1=${PWD##*/}
cd ..
WP0=${PWD##*/}
cd $WP1/$WP2/$WP3
GIT_PROJECT_PATH=$WP0/$WP1/$WP2/$WP3

echo $WP0 $WP1 $WP2 $WP3

# Default values
DRYRUN=true
DELETE=false
RDATA=false
RDOCKER=false

# Get the user@host
IFS=':' read -ra SSH_REMOTE <<< "$REMOTE_FOLDER"
unset IFS

# Get the remote folder
IFS=':' read -ra A <<< "$REMOTE_FOLDER"
SSH_FOLDER=${A[1]}
unset IFS

# Options processing
POS=0

while getopts rdaph opt ; do
	case "$opt" in
    h) help
        exit 0
        ;;
    r) DRYRUN=false
        ;;
    d) DELETE=true
        ;;
    a) RDATA=true
        ;;
    p) RDOCKER=true
        ;;
    ?) help
        exit 0
        ;;
	esac
done

# Initial options for SSH and RSYNC
SSH_OPTIONS="-p ${SSH_PORT}"

# Amazon PEM
if [ ! -z $AWS_PEM ] ; then

  SSH_OPTIONS="${SSH_OPTIONS} -i ${AWS_PEM}"

fi

# BEWARE THE DELETE!!!
if [ "$DELETE" = true ] ; then 

  DELETE_F="--delete"
  
else 

  DELETE_F=
  
fi

# Dry run
if [ "$DRYRUN" = true ] ; then 

  DRYRUN_F="--dry-run"
  
else 

  DRYRUN_F=
  
fi

# Set excludes if data is not being synced
EXCLUDES_F=""

# Exclude work_packages data folders
if [ "$RDATA" = false ] ; then

  EXCLUDES_F="${EXCLUDES_F} --exclude \"/data/\""

fi

# Exclude work_packages Docker folders
if [ "$RDOCKER" = false ] ; then

  EXCLUDES_F="${EXCLUDES_F} --exclude \"/docker_persistent_volumes/\""

fi

# Process of given excludes
for EXCLUDE in "${EXCLUDES[@]}" ; do

  EXCLUDES_F="${EXCLUDES_F} --exclude \"${EXCLUDE}\""

done

# The command
RSYNC="rsync -avzhr ${DRYRUN_F} ${EXCLUDES_F} --progress ${DELETE_F} ${DRY_RUN_F} --rsh=\"ssh ${SSH_OPTIONS}\" "

# Create the root folder if not exists
if [ "$DRYRUN" = "true" ] ; then

  ssh $SSH_REMOTE "mkdir -p ${SSH_FOLDER}/${GIT_PROJECT_PATH}"

fi

# Run the command
RSYNC="${RSYNC} ${SOURCE_FOLDER}/ ${REMOTE_FOLDER}/${GIT_PROJECT_PATH}/"
eval $RSYNC

# Report
echo
echo --------------------------------------------------
echo Context: $(mlkcontext)
echo Folder: $REMOTE_FOLDER
echo --------------------------------------------------
echo "Dry run (r):             ${DRYRUN}"
echo "Delete (d):              ${DELETE}"
echo "Sync data (a):           ${RDATA}"
echo "Sync Docker volumes (p): ${RDOCKER}"
echo
